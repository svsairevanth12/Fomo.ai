import type { Meeting, TranscriptSegment, ActionItem } from '@/types';
import { formatDuration, formatTimestamp } from './utils';

/**
 * Export meeting as Markdown
 */
export const exportAsMarkdown = (meeting: Meeting): string => {
  const lines: string[] = [];

  // Header
  lines.push(`# ${meeting.title}`);
  lines.push('');
  lines.push(`**Date:** ${new Date(meeting.startTime).toLocaleString()}`);
  lines.push(`**Duration:** ${formatDuration(meeting.duration)}`);
  lines.push(`**Status:** ${meeting.status}`);
  lines.push('');

  // Stats
  lines.push('---');
  lines.push('');
  lines.push('## Meeting Stats');
  lines.push('');
  lines.push(`- **Transcript Segments:** ${meeting.transcript.length}`);
  lines.push(`- **Action Items:** ${meeting.actionItems.length}`);
  if (meeting.participants.length > 0) {
    lines.push(`- **Participants:** ${meeting.participants.join(', ')}`);
  }
  lines.push('');

  // Transcript
  lines.push('---');
  lines.push('');
  lines.push('## Transcript');
  lines.push('');

  if (meeting.transcript.length === 0) {
    lines.push('*No transcript available*');
  } else {
    meeting.transcript.forEach((segment) => {
      lines.push(`### ${segment.speaker} (${formatTimestamp(segment.startTime)})`);
      lines.push('');
      lines.push(segment.text);
      lines.push('');
      if (segment.confidence < 0.9) {
        lines.push(`*Low confidence: ${Math.round(segment.confidence * 100)}%*`);
        lines.push('');
      }
    });
  }

  // Action Items
  if (meeting.actionItems.length > 0) {
    lines.push('---');
    lines.push('');
    lines.push('## Action Items');
    lines.push('');

    meeting.actionItems.forEach((item, index) => {
      const checkbox = item.status === 'created' ? '[x]' : '[ ]';
      lines.push(`${index + 1}. ${checkbox} **${item.text}**`);
      if (item.assignee) {
        lines.push(`   - Assignee: ${item.assignee}`);
      }
      lines.push(`   - Priority: ${item.priority.toUpperCase()}`);
      lines.push(`   - Status: ${item.status}`);
      if (item.context) {
        lines.push(`   - Context: "${item.context}"`);
      }
      if (item.githubIssue) {
        lines.push(`   - GitHub: [#${item.githubIssue.number}](${item.githubIssue.url})`);
      }
      lines.push('');
    });
  }

  // Summary
  if (meeting.summary) {
    lines.push('---');
    lines.push('');
    lines.push('## Summary');
    lines.push('');

    if (meeting.summary.keyDecisions.length > 0) {
      lines.push('### Key Decisions');
      lines.push('');
      meeting.summary.keyDecisions.forEach((decision) => {
        lines.push(`- ${decision}`);
      });
      lines.push('');
    }

    if (meeting.summary.nextSteps.length > 0) {
      lines.push('### Next Steps');
      lines.push('');
      meeting.summary.nextSteps.forEach((step) => {
        lines.push(`- ${step}`);
      });
      lines.push('');
    }

    if (meeting.summary.blockers.length > 0) {
      lines.push('### Blockers');
      lines.push('');
      meeting.summary.blockers.forEach((blocker) => {
        lines.push(`- ⚠️ ${blocker}`);
      });
      lines.push('');
    }

    if (meeting.summary.topics.length > 0) {
      lines.push('### Topics Discussed');
      lines.push('');
      lines.push(meeting.summary.topics.join(', '));
      lines.push('');
    }
  }

  // Footer
  lines.push('---');
  lines.push('');
  lines.push(`*Generated by FOMO on ${new Date().toLocaleString()}*`);

  return lines.join('\n');
};

/**
 * Export meeting as JSON
 */
export const exportAsJSON = (meeting: Meeting): string => {
  return JSON.stringify(meeting, null, 2);
};

/**
 * Export meeting as plain text
 */
export const exportAsText = (meeting: Meeting): string => {
  const lines: string[] = [];

  // Header
  lines.push('='.repeat(60));
  lines.push(meeting.title.toUpperCase());
  lines.push('='.repeat(60));
  lines.push('');
  lines.push(`Date: ${new Date(meeting.startTime).toLocaleString()}`);
  lines.push(`Duration: ${formatDuration(meeting.duration)}`);
  lines.push(`Status: ${meeting.status}`);
  lines.push('');

  // Transcript
  lines.push('-'.repeat(60));
  lines.push('TRANSCRIPT');
  lines.push('-'.repeat(60));
  lines.push('');

  if (meeting.transcript.length === 0) {
    lines.push('No transcript available');
  } else {
    meeting.transcript.forEach((segment) => {
      lines.push(`[${formatTimestamp(segment.startTime)}] ${segment.speaker}:`);
      lines.push(segment.text);
      lines.push('');
    });
  }

  // Action Items
  if (meeting.actionItems.length > 0) {
    lines.push('-'.repeat(60));
    lines.push('ACTION ITEMS');
    lines.push('-'.repeat(60));
    lines.push('');

    meeting.actionItems.forEach((item, index) => {
      lines.push(`${index + 1}. ${item.text}`);
      if (item.assignee) {
        lines.push(`   Assignee: ${item.assignee}`);
      }
      lines.push(`   Priority: ${item.priority.toUpperCase()}`);
      lines.push('');
    });
  }

  // Summary
  if (meeting.summary) {
    lines.push('-'.repeat(60));
    lines.push('SUMMARY');
    lines.push('-'.repeat(60));
    lines.push('');

    if (meeting.summary.keyDecisions.length > 0) {
      lines.push('Key Decisions:');
      meeting.summary.keyDecisions.forEach((decision) => {
        lines.push(`  - ${decision}`);
      });
      lines.push('');
    }

    if (meeting.summary.nextSteps.length > 0) {
      lines.push('Next Steps:');
      meeting.summary.nextSteps.forEach((step) => {
        lines.push(`  - ${step}`);
      });
      lines.push('');
    }

    if (meeting.summary.blockers.length > 0) {
      lines.push('Blockers:');
      meeting.summary.blockers.forEach((blocker) => {
        lines.push(`  - ${blocker}`);
      });
      lines.push('');
    }
  }

  lines.push('='.repeat(60));
  lines.push(`Generated by FOMO on ${new Date().toLocaleString()}`);
  lines.push('='.repeat(60));

  return lines.join('\n');
};

/**
 * Download file to user's computer
 */
export const downloadFile = (content: string, filename: string, mimeType: string) => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

/**
 * Copy text to clipboard
 */
export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

/**
 * Generate a sanitized filename from meeting title
 */
export const sanitizeFilename = (title: string, extension: string): string => {
  const sanitized = title
    .replace(/[^a-z0-9]/gi, '_')
    .replace(/_+/g, '_')
    .toLowerCase();
  const timestamp = new Date().toISOString().split('T')[0];
  return `${sanitized}_${timestamp}.${extension}`;
};

/**
 * Create email body for sharing
 */
export const createEmailBody = (meeting: Meeting): string => {
  const subject = encodeURIComponent(`Meeting Notes: ${meeting.title}`);
  const body = encodeURIComponent(exportAsText(meeting));
  return `mailto:?subject=${subject}&body=${body}`;
};

/**
 * Generate shareable summary (short version for sharing)
 */
export const generateShareableSummary = (meeting: Meeting): string => {
  const lines: string[] = [];

  lines.push(`📝 ${meeting.title}`);
  lines.push(`📅 ${new Date(meeting.startTime).toLocaleDateString()}`);
  lines.push(`⏱️ ${formatDuration(meeting.duration)}`);
  lines.push('');

  if (meeting.summary) {
    if (meeting.summary.keyDecisions.length > 0) {
      lines.push('🎯 Key Decisions:');
      meeting.summary.keyDecisions.slice(0, 3).forEach((decision) => {
        lines.push(`  • ${decision}`);
      });
      lines.push('');
    }

    if (meeting.actionItems.length > 0) {
      lines.push('✅ Action Items:');
      meeting.actionItems.slice(0, 3).forEach((item) => {
        lines.push(`  • ${item.text}${item.assignee ? ` (@${item.assignee})` : ''}`);
      });
      if (meeting.actionItems.length > 3) {
        lines.push(`  ... and ${meeting.actionItems.length - 3} more`);
      }
      lines.push('');
    }
  } else {
    lines.push(`📊 ${meeting.transcript.length} transcript segments`);
    lines.push(`✅ ${meeting.actionItems.length} action items`);
    lines.push('');
  }

  lines.push('Generated by FOMO');

  return lines.join('\n');
};

