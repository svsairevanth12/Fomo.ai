import axios, { AxiosInstance } from 'axios';
import type {
  GitHubUser,
  GitHubRepository,
  GitHubIssue,
  ActionItem
} from '@/types';

const GITHUB_API_BASE = 'https://api.github.com';

class GitHubService {
  private client: AxiosInstance;

  constructor() {
    this.client = axios.create({
      baseURL: GITHUB_API_BASE,
      headers: {
        Accept: 'application/vnd.github.v3+json'
      }
    });
  }

  setToken(token: string) {
    this.client.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  clearToken() {
    delete this.client.defaults.headers.common['Authorization'];
  }

  // ============ Authentication ============
  async getCurrentUser(): Promise<GitHubUser> {
    const response = await this.client.get<GitHubUser>('/user');
    return response.data;
  }

  // ============ Repositories ============
  async getUserRepositories(username: string): Promise<GitHubRepository[]> {
    const response = await this.client.get<GitHubRepository[]>(
      `/users/${username}/repos`,
      {
        params: {
          sort: 'updated',
          per_page: 100
        }
      }
    );
    return response.data;
  }

  async getRepository(owner: string, repo: string): Promise<GitHubRepository> {
    const response = await this.client.get<GitHubRepository>(`/repos/${owner}/${repo}`);
    return response.data;
  }

  // ============ Issues ============
  async createIssue(
    owner: string,
    repo: string,
    title: string,
    body: string,
    assignee?: string,
    labels?: string[]
  ): Promise<GitHubIssue> {
    const response = await this.client.post<GitHubIssue>(
      `/repos/${owner}/${repo}/issues`,
      {
        title,
        body,
        assignee,
        labels
      }
    );
    return response.data;
  }

  async createIssueFromActionItem(
    owner: string,
    repo: string,
    actionItem: ActionItem,
    meetingTitle: string
  ): Promise<GitHubIssue> {
    const title = actionItem.text;
    const body = this.formatActionItemBody(actionItem, meetingTitle);

    return this.createIssue(
      owner,
      repo,
      title,
      body,
      actionItem.assignee || undefined,
      ['meeting-action-item', `priority-${actionItem.priority}`]
    );
  }

  private formatActionItemBody(actionItem: ActionItem, meetingTitle: string): string {
    return `## Action Item from Meeting

**Meeting:** ${meetingTitle}
**Priority:** ${actionItem.priority.toUpperCase()}
**Timestamp:** ${new Date(actionItem.timestamp).toLocaleString()}

### Task
${actionItem.text}

### Context
${actionItem.context}

---
*Generated by FOMO - AI Meeting Assistant*
`;
  }

  async updateIssue(
    owner: string,
    repo: string,
    issueNumber: number,
    updates: {
      title?: string;
      body?: string;
      state?: 'open' | 'closed';
      assignee?: string;
      labels?: string[];
    }
  ): Promise<GitHubIssue> {
    const response = await this.client.patch<GitHubIssue>(
      `/repos/${owner}/${repo}/issues/${issueNumber}`,
      updates
    );
    return response.data;
  }

  async getIssue(owner: string, repo: string, issueNumber: number): Promise<GitHubIssue> {
    const response = await this.client.get<GitHubIssue>(
      `/repos/${owner}/${repo}/issues/${issueNumber}`
    );
    return response.data;
  }

  // ============ Collaborators ============
  async getCollaborators(owner: string, repo: string): Promise<GitHubUser[]> {
    const response = await this.client.get<GitHubUser[]>(
      `/repos/${owner}/${repo}/collaborators`
    );
    return response.data;
  }

  // ============ OAuth Flow ============
  static getOAuthURL(clientId: string, redirectUri: string): string {
    const scope = 'repo user';
    return `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}`;
  }
}

// Create singleton instance
export const github = new GitHubService();
